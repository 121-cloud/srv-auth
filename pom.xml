<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd
                            http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>otocloud</groupId>
        <artifactId>otocloud-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <!-- groupId, version在parent中统一定义. -->
    <!--<groupId>otocloud</groupId>-->
    <artifactId>otocloud-auth</artifactId>
    <!--<version>${otocloud.version}</version>-->

    <packaging>jar</packaging>

    <properties>
        <dbunit.version>2.5.1</dbunit.version>

        <!-- 配置REST API文档的生成 -->
        <swagger.input.directory>${project.basedir}/src/main/swagger</swagger.input.directory>
        <!--<base.generated.docs.dir>${project.build.directory}/generated-docs</base.generated.docs.dir>-->
        <base.generated.docs.dir>${project.basedir}/src/main/</base.generated.docs.dir>
        <generated.asciidoc.directory>${base.generated.docs.dir}/asciidoc</generated.asciidoc.directory>
        <generated.example.directory>${base.generated.docs.dir}/example</generated.example.directory>

        <!--<asciidoctor.input.directory>${project.basedir}/src/main/asciidoc</asciidoctor.input.directory>-->
        <asciidoctor.input.directory>${generated.asciidoc.directory}</asciidoctor.input.directory>
        <asciidoctor.html.output.directory>${project.build.directory}/generated-docs/html
        </asciidoctor.html.output.directory>
        <!-- END：配置REST API文档的生成 -->

        <httpcore.version>4.4.3</httpcore.version>
        <gson.version>2.4</gson.version>
        <commons-dbcp2.version>2.1.1</commons-dbcp2.version>
        <oltu.oauth2.version>1.0.1</oltu.oauth2.version>

        <jasypt.version>1.9.2</jasypt.version>

        <javax.mail-api.version>1.5.5</javax.mail-api.version>
        <javax.mail.version>1.5.5</javax.mail.version>

        <activation.version>1.1.1</activation.version>
    </properties>

    <build>
        <!--<resources>-->
            <!--<resource>-->
                <!--<directory>src/main/resources</directory>-->
                <!--<filtering>true</filtering>-->
                <!--<excludes>-->
                    <!--<exclude>mybatis-generator.xml</exclude>-->
                <!--</excludes>-->
            <!--</resource>-->
        <!--</resources>-->
        <plugins>
            <!-- 打包时添加源代码 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <!-- Copy the static docs into build.outputDirectory to be included in the jar -->
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}/static/docs</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${asciidoctor.html.output.directory}</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <id>auth-doc</id>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <descriptors>
                                <descriptor>${project.basedir}/src/main/assembly/docs.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.0</version>
            </plugin>

            <!-- 使用asciidoctor生成html页面文档 -->
            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>1.5.2</version>
                <!-- Configure generic document generation settings -->
                <configuration>
                    <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
                    <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>
                    <backend>html5</backend>
                    <doctype>book</doctype>
                    <attributes>
                        <doctype>book</doctype>
                        <toc>left</toc>
                        <toclevels>2</toclevels>
                        <generated>${generated.asciidoc.directory}</generated>
                        <!-- 语法高亮 -->
                        <source-highlighter>coderay</source-highlighter>
                    </attributes>
                </configuration>
                <!-- Since each execution can only handle one backend, run
                     separate executions for each desired output type -->
<!--                 <executions>
                    <execution>
                        <id>output-html</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                    </execution>
                </executions> -->
            </plugin>

            <!-- Copy the static docs into build.outputDirectory to be included in the jar -->

            <!-- END：YAML API文档生成-->

        </plugins>
    </build>

    <dependencies>
        <!-- vertx-core 在 otocloud-framework 中配置-->

        <!-- vertx-web 在 otocloud-framework 中配置-->

        <!-- vertx-jdbc-client 在 otocloud-framework 中配置-->

        <!-- vertx-mongo-client 在 otocloud-framework 中配置-->

        <!-- Mysql数据库驱动 -->
        <!-- mysql-connector-java 在 otocloud-framework 中配置-->

        <!-- oauth2.0 -->
        <dependency>
            <groupId>org.apache.oltu.oauth2</groupId>
            <artifactId>org.apache.oltu.oauth2.common</artifactId>
            <version>${oltu.oauth2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.oltu.oauth2</groupId>
            <artifactId>org.apache.oltu.oauth2.authzserver</artifactId>
            <version>${oltu.oauth2.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.oltu.oauth2</groupId>
            <artifactId>org.apache.oltu.oauth2.resourceserver</artifactId>
            <version>${oltu.oauth2.version}</version>
        </dependency>


        <!-- 与oltu.oauth2配合使用 -->
        <dependency>
            <groupId>com.englishtown.vertx</groupId>
            <artifactId>vertx-httpservlet</artifactId>
            <version>2.1.0</version>
        </dependency>

        <!-- vertx-auth -->
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-auth-jdbc</artifactId>
        </dependency>

        <!-- 发送邮件 - 接口 -->
        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>javax.mail-api</artifactId>
            <version>${javax.mail-api.version}</version>
        </dependency>

        <!-- 发送邮件 - 实现 -->
        <dependency>
            <groupId>com.sun.mail</groupId>
            <artifactId>javax.mail</artifactId>
            <version>${javax.mail.version}</version>
        </dependency>

        <!-- RSA加密 -->
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15on</artifactId>
            <version>1.52</version>
        </dependency>

        <!-- RSA加密 -->
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcpkix-jdk15on</artifactId>
            <version>1.52</version>
        </dependency>

        <!-- 被 java mail 依赖 -->
        <dependency>
            <groupId>javax.activation</groupId>
            <artifactId>activation</artifactId>
            <version>${activation.version}</version>
        </dependency>

        <!--<dependency>-->
            <!--<groupId>com.netflix.governator</groupId>-->
            <!--<artifactId>governator</artifactId>-->
            <!--<version>1.10.5</version>-->
        <!--</dependency>-->

        <!--<dependency>-->
            <!--<groupId>com.netflix.governator</groupId>-->
            <!--<artifactId>governator-core</artifactId>-->
            <!--<version>1.10.5</version>-->
        <!--</dependency>-->

        <!--<dependency>-->
            <!--<groupId>com.netflix.governator</groupId>-->
            <!--<artifactId>governator-annotations</artifactId>-->
            <!--<version>1.10.5</version>-->
        <!--</dependency>-->

        <!-- gson -->
<!--         <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${gson.version}</version>
        </dependency> -->

        <!-- common-collections4 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
        </dependency>

        <!-- commons-lang3 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <!-- 密码加密 -->
        <dependency>
            <groupId>org.jasypt</groupId>
            <artifactId>jasypt</artifactId>
            <version>${jasypt.version}</version>
        </dependency>


        <!-- 验证框架 -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
        </dependency>

        <dependency>
            <groupId>javax.el</groupId>
            <artifactId>javax.el-api</artifactId>
            <!-- 覆盖parent中的配置：provided-->
            <scope>compile</scope>
        </dependency>

        <!-- otocloud-framework -->
        <dependency>
            <groupId>otocloud</groupId>
            <artifactId>otocloud-framework</artifactId>
            <version>${otocloud.version}</version>
        </dependency>

        <dependency>
            <scope>test</scope>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
            <version>${vertx.version}</version>
            <type>test-jar</type>
        </dependency>

        <dependency>
            <scope>test</scope>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-unit</artifactId>
        </dependency>

        <dependency>
            <scope>test</scope>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>

        <dependency>
            <scope>test</scope>
            <groupId>org.dbunit</groupId>
            <artifactId>dbunit</artifactId>
            <version>${dbunit.version}</version>
        </dependency>

        <dependency>
            <scope>test</scope>
            <groupId>net.jodah</groupId>
            <artifactId>concurrentunit</artifactId>
        </dependency>

        <!-- 添加Promise模型的Java类库 -->
        <dependency>
            <scope>test</scope>
            <groupId>org.jdeferred</groupId>
            <artifactId>jdeferred-core</artifactId>
            <version>1.2.4</version>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-api</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 添加REST API的集成测试 -->
        <dependency>
            <scope>test</scope>
            <groupId>com.jayway.restassured</groupId>
            <artifactId>rest-assured</artifactId>
        </dependency>

        <dependency>
            <scope>test</scope>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>${httpcore.version}</version>
        </dependency>

        <dependency>
            <scope>test</scope>
            <groupId>org.jmockit</groupId>
            <artifactId>jmockit</artifactId>
        </dependency>
        <!-- END：添加REST API的集成测试 -->

        <!-- 测试, 用于对外暴露API接口 -->
        <dependency>
            <scope>test</scope>
            <groupId>otocloud</groupId>
            <artifactId>otocloud-webserver</artifactId>
            <version>${project.version}</version>
        </dependency>

<!--         <dependency>
            <scope>test</scope>
            <groupId>otocloud</groupId>
            <artifactId>otocloud-srv-test-base</artifactId>
            <version>${project.version}</version>
        </dependency> -->

    </dependencies>

    <repositories>
        <repository>
            <id>central</id>
            <name>Maven Repository Switchboard</name>
            <layout>default</layout>
            <url>http://repo1.maven.org/maven2</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

</project>